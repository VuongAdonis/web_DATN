import rclpy
from rclpy.node import Node
from nav_msgs.msg import OccupancyGrid
from std_msgs.msg import String  # Thông điệp kiểu String để xuất bản JSON
import json

class MapToJsonNode(Node):
    def __init__(self):
        super().__init__('map_to_json_node')
        self.subscription = self.create_subscription(
            OccupancyGrid,
            '/map',
            self.listener_callback,
            10)
        
        # Khởi tạo publisher cho topic 'map_json'
        self.publisher = self.create_publisher(String, 'map_json', 10)
        self.get_logger().info('Đang lắng nghe topic: /map và gửi JSON đến topic: /map_json')

    def listener_callback(self, msg):
        # Chuyển đổi thông điệp thành từ điển
        map_dict = {
            'header': {
                'seq': msg.header.seq,
                'stamp': {
                    'secs': msg.header.stamp.sec,
                    'nsecs': msg.header.stamp.nanosec
                },
                'frame_id': msg.header.frame_id
            },
            'info': {
                'map_load_time': {
                    'secs': msg.info.map_load_time.sec,
                    'nsecs': msg.info.map_load_time.nanosec
                },
                'resolution': msg.info.resolution,
                'width': msg.info.width,
                'height': msg.info.height,
                'origin': {
                    'position': {
                        'x': msg.info.origin.position.x,
                        'y': msg.info.origin.position.y,
                        'z': msg.info.origin.position.z
                    },
                    'orientation': {
                        'x': msg.info.origin.orientation.x,
                        'y': msg.info.origin.orientation.y,
                        'z': msg.info.origin.orientation.z,
                        'w': msg.info.origin.orientation.w
                    }
                }
            },
            'data': msg.data  # Dữ liệu bản đồ
        }

        # Chuyển đổi từ điển thành chuỗi JSON
        json_data = json.dumps(map_dict)

        # Hiển thị trong log
        self.get_logger().info(f'Dữ liệu JSON: {json_data}')
        
        # Xuất bản dữ liệu JSON lên topic 'map_json'
        json_msg = String()
        json_msg.data = json_data
        self.publisher.publish(json_msg)

def main(args=None):
    rclpy.init(args=args)
    node = MapToJsonNode()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
