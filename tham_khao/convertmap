import rclpy
from rclpy.node import Node
from nav_msgs.msg import OccupancyGrid
from std_msgs.msg import String  # Thông điệp kiểu String để xuất bản JSON
import json
import array as arr

def occupancy_grid_to_dict(occupancy_grid_msg):
    # Tạo một biểu diễn từ điển của thông điệp OccupancyGrid
    map_dict = {
        'header': {
            'stamp': {
                'secs': occupancy_grid_msg.header.stamp.sec,
                'nsecs': occupancy_grid_msg.header.stamp.nanosec
            },
            'frame_id': occupancy_grid_msg.header.frame_id
        },
        'info': {
            'map_load_time': {
                'secs': occupancy_grid_msg.info.map_load_time.sec,
                'nsecs': occupancy_grid_msg.info.map_load_time.nanosec
            },
            'resolution': occupancy_grid_msg.info.resolution,
            'width': occupancy_grid_msg.info.width,
            'height': occupancy_grid_msg.info.height,
            'origin': {
                'position': {
                    'x': occupancy_grid_msg.info.origin.position.x,
                    'y': occupancy_grid_msg.info.origin.position.y,
                    'z': occupancy_grid_msg.info.origin.position.z
                },
                'orientation': {
                    'x': occupancy_grid_msg.info.origin.orientation.x,
                    'y': occupancy_grid_msg.info.origin.orientation.y,
                    'z': occupancy_grid_msg.info.origin.orientation.z,
                    'w': occupancy_grid_msg.info.origin.orientation.w
                }
            }
        },
        'data': occupancy_grid_msg.data.tolist()  # Bao gồm trực tiếp dữ liệu chiếm dụng
    }
    
    return map_dict

class MapToJsonNode(Node):
    def __init__(self):
        super().__init__('map_to_json_node')
        self.subscription = self.create_subscription(
            OccupancyGrid,
            '/map',
            self.listener_callback,
            10)
        
        # Khởi tạo publisher cho topic 'map_json'
        self.publisher = self.create_publisher(String, 'map_json', 10)
        self.get_logger().info('Đang lắng nghe topic: /map và gửi JSON đến topic: /map_json')

    def listener_callback(self, msg):

        # Chuyển đổi từ điển thành chuỗi JSON
        # json_data = json.dumps(map_dict)
        list_data = msg.data.tolist()
        
        # Xuất bản dữ liệu JSON lên topic 'map_json'
        occupancy_grid_msg = OccupancyGrid()
        occupancy_grid_msg.header = msg.header
        occupancy_grid_msg.info = msg.info
        occupancy_grid_msg.data = list_data
        de_to_json = occupancy_grid_to_dict(occupancy_grid_msg)

        # json_test = json.dumps(msg.header)
        print("Success1")

        json_output = json.dumps(de_to_json)
        publish_msg = String()
        publish_msg.data = json_output
        self.publisher.publish(publish_msg)

def main(args=None):
    rclpy.init(args=args)
    node = MapToJsonNode()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
